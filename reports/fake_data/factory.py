import copy

MONTH = 1475323200000
THREE_MONTHS = 1470052800000
SIX_MONTHS = 1462104000000

raw_data = [
    {"key": "VCAMCM",
     "values": [[1451649600000, 0], [1454328000000, 5.0], [1456833600000, 5.0], [1459512000000, 5.0],
                [1462104000000, 5.0], [1464782400000, 5.0], [1467374400000, 5.0], [1470052800000, 5.0],
                [1472731200000, 5.0], [1475323200000, 5.0], [1478001600000, 5.0], [1480593600000, 5.0]]},
    {"key": "VAS",
     "values": [[1451649600000, 5.0], [1454328000000, 5.0], [1456833600000, 5.0], [1459512000000, 5.0],
                [1462104000000, 5.0], [1464782400000, 5.0], [1467374400000, 5.0], [1470052800000, 5.0],
                [1472731200000, 5.0], [1475323200000, 5.0], [1478001600000, 5.0], [1480593600000, 5.0]]},
    {"key": "FoS",
     "values": [[1451649600000, 15.0], [1454328000000, 15.0], [1456833600000, 15.0], [1459512000000, 15.0],
                [1462104000000, 15.0], [1464782400000, 15.0], [1467374400000, 15.0], [1470052800000, 15.0],
                [1472731200000, 15.0], [1475323200000, 15.0], [1478001600000, 15.0], [1480593600000, 15.0]]},
    {"key": "MDHS",
     "values": [[1451649600000, 10], [1454328000000, 10], [1456833600000, 10], [1459512000000, 15],
                [1462104000000, 20], [1464782400000, 30], [1467374400000, 30], [1470052800000, 30],
                [1472731200000, 30], [1475323200000, 30], [1478001600000, 30], [1480593600000, 10]]},
    {"key": "MLS",
     "values": [[1451649600000, 5.0], [1454328000000, 15.0], [1456833600000, 15.0], [1459512000000, 15.0],
                [1462104000000, 15.0], [1464782400000, 15.0], [1467374400000, 15.0], [1470052800000, 15.0],
                [1472731200000, 15.0], [1475323200000, 15.0], [1478001600000, 15.0], [1480593600000, 15.0]]},
    {"key": "MSE",
     "values": [[1451649600000, 5.0], [1454328000000, 5.0], [1456833600000, 5.0], [1459512000000, 5.0],
                [1462104000000, 5.0], [1464782400000, 5.0], [1467374400000, 5.0], [1470052800000, 5.0],
                [1472731200000, 5.0], [1475323200000, 5.0], [1478001600000, 5.0], [1480593600000, 5.0]]},
    {"key": "MGSE",
     "values": [[1451649600000, 5.0], [1454328000000, 5.0], [1456833600000, 5.0], [1459512000000, 5.0],
                [1462104000000, 5.0], [1464782400000, 5.0], [1467374400000, 5.0], [1470052800000, 5.0],
                [1472731200000, 5.0], [1475323200000, 5.0], [1478001600000, 5.0], [1480593600000, 5.0]]},
    {"key": "FBE",
     "values": [[1451649600000, 5.0], [1454328000000, 5.0], [1456833600000, 5.0], [1459512000000, 5.0],
                [1462104000000, 5.0], [1464782400000, 5.0], [1467374400000, 5.0], [1470052800000, 5.0],
                [1472731200000, 5.0], [1475323200000, 5.0], [1478001600000, 5.0], [1480593600000, 5.0]]},
    {"key": "FoA",
     "values": [[1451649600000, 5.0], [1454328000000, 5.0], [1456833600000, 5.0], [1459512000000, 5.0],
                [1462104000000, 5.0], [1464782400000, 5.0], [1467374400000, 5.0], [1470052800000, 5.0],
                [1472731200000, 5.0], [1475323200000, 5.0], [1478001600000, 5.0], [1480593600000, 5.0]]},
    {"key": "ABP",
     "values": [[1451649600000, 5.0], [1454328000000, 5.0], [1456833600000, 5.0], [1459512000000, 5.0],
                [1462104000000, 5.0], [1464782400000, 5.0], [1467374400000, 5.0], [1470052800000, 5.0],
                [1472731200000, 5.0], [1475323200000, 5.0], [1478001600000, 5.0], [1480593600000, 5.0]]}
]

allocated = [
    {
        "key": "total",
        "values": [
            [1451649600000, 920.35], [1454328000000, 996.62], [1456833600000, 1041.61], [1459512000000, 1080.32],
            [1462104000000, 1121.99], [1464782400000, 1121.99], [1467374400000, 1181.2], [1470052800000, 1210.6],
            [1472731200000, 1230.8], [1475323200000, 1263.22], [1478001600000, 1305.10], [1480593600000, 1428.20]
        ]
    },
    {
        "key": "market",
        "values": [
            [1451649600000, 320], [1454328000000, 340.55], [1456833600000, 360.4], [1459512000000, 380],
            [1462104000000, 400.5], [1464782400000, 420.60], [1467374400000, 420.67], [1470052800000, 430.20],
            [1472731200000, 440], [1475323200000, 450], [1478001600000, 510.2], [1480593600000, 510.2]
        ]
    },
    {
        "key": "vault",
        "values": [
            [1451649600000, 500], [1454328000000, 535.67], [1456833600000, 550.2], [1459512000000, 560.32],
            [1462104000000, 570.5], [1464782400000, 600.10], [1467374400000, 620], [1470052800000, 620],
            [1472731200000, 630], [1475323200000, 655], [1478001600000, 655], [1480593600000, 705]
        ]
    },
    {
        "key": "compute",
        "values": [
            [1451649600000, 100.34], [1454328000000, 120.4], [1456833600000, 130.56], [1459512000000, 140],
            [1462104000000, 150.99], [1464782400000, 160.50], [1467374400000, 169.99], [1470052800000, 180.6],
            [1472731200000, 193.22], [1475323200000, 200.10], [1478001600000, 205], [1480593600000, 213]
        ]
    }
]


def get_faculty_quota():
    return raw_data


def get_quota(date, storage_type):
    for entry in allocated:
        if entry['key'] == storage_type:
            for s in entry['values']:
                if s[0] == date:
                    return s[1]
    return 0


def get_faculty_allocated(duration, storage_type):
    data = copy.deepcopy(raw_data)
    for entry in data:
        new_values = []
        for s in entry['values']:
            quota = get_quota(s[0], storage_type)
            s[1] = quota/s[1] if s[1] != 0 else 0
            if (duration == 'oneMonth') and s[0] > MONTH:
                new_values.append(s)
            elif (duration == 'threeMonths') and s[0] > THREE_MONTHS:
                new_values.append(s)
            elif (duration == 'sixMonths') and s[0] > SIX_MONTHS:
                new_values.append(s)
        if len(new_values) > 0:
            entry['values'] = new_values
    return data


def get(path, duration, storage_type):
    quota = {}
    if path.endswith('quota/'):
        quota = get_faculty_quota()
    elif path.endswith('faculty_allocated/'):
        quota = get_faculty_allocated(duration, storage_type)
    return quota
