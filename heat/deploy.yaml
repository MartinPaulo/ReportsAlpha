# Juno Release
heat_template_version: 2014-10-16


description: 'Install Reporting APP on a single Ubuntu  16.06 instance. '


parameters:

  key_name:
    type: string
    label: Key Name
    description: Name of an existing KeyPair to enable SSH access to the instances.
    default: new_mbp
    constraints:
      - custom_constraint: nova.keypair
        description: Must be an existing KeyPair

  image_id:
    type: string
    label: Image ID
    description: Image to be used for compute instance
    default: 37c839bb-6773-469b-9153-ca8752bf64b5    #0b13ecb7-6c8a-49c9-8be9-f249937cbc8e
    constraints:
      - custom_constraint: glance.image
        description: Must be a valid Ubuntu image

  instance_type:
    type: string
    label: Instance Type
    description: Type of instance (flavor) to be used.
    default: m2.tiny
    constraints:
      - custom_constraint: nova.flavor
        description: Must be a valid NeCTAR flavour

  availability_zone:
    type: string
    label: Availability Zone
    description: Physical location of the server.
    default: melbourne
    constraints:
      - allowed_values: [ monash, melbourne, QRIScloud, NCI, intersect, pawsey, sa, tasmania ]
        description: Value must be one of monash, melbourne, QRIScloud, NCI, intersect, pawsey, sa, tasmania.


resources:

    # Use this when we do not have Neutron networking.
    # http://docs.openstack.org/developer/heat/template_guide/cfn.html#AWS::EC2::SecurityGroup
    web_security_group:
        type: AWS::EC2::SecurityGroup
        properties:
            GroupDescription: Web server access rules.
            SecurityGroupIngress:
                - {IpProtocol: tcp, FromPort: '22', ToPort: '22', CidrIp: 0.0.0.0/0}
                - {IpProtocol: tcp, FromPort: '80', ToPort: '80', CidrIp: 0.0.0.0/0}

    wait_condition:
      type: OS::Heat::WaitCondition
      properties:
        handle: { get_resource: wait_handle }
        count: 1
        timeout: 600

    wait_handle:
      type: OS::Heat::WaitConditionHandle

    secret_key:
      type: OS::Heat::RandomString
      properties:
        length: 50

    app_server:
        type: OS::Nova::Server
        properties:
            key_name: { get_param: key_name }
            image: { get_param: image_id }
            flavor: { get_param: instance_type }
            availability_zone: {get_param: availability_zone}
            security_groups:
                - { get_resource: web_security_group }
            user_data_format: RAW
            user_data:
              str_replace:
                params:
                  wc_notify: {get_attr: ['wait_handle', 'curl_cli'] }
                  NEW_KEY: {get_attr: ['secret_key', 'value']}
                template: |
                  #!/bin/bash
                  echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
                  echo "Beginning run of user_data script. "
                  # useful links:
                  #   http://stackoverflow.com/questions/20913125/mod-wsgi-for-correct-version-of-python3
                  #   https://www.digitalocean.com/community/tutorials/how-to-serve-django-applications-with-apache-and-mod_wsgi-on-ubuntu-16-04
                  #   https://www.digitalocean.com/community/tutorials/how-to-run-django-with-mod_wsgi-and-apache-with-a-virtualenv-python-environment-on-a-debian-vps
                  apt-get update
                  # It would appear that ubuntu 16.04 automatically runs unattended-upgrades on boot:
                  # hence our script sometimes clashes with it. Hence we wait if we find it running...
                  while sudo fuser /var/lib/dpkg/lock >/dev/null 2>&1; do
                    sleep 1
                  done
                  apt-get -y upgrade
                  apt-get -y install python3-pip apache2 libapache2-mod-wsgi-py3
                  apt-get -y install git
                  git clone https://github.com/MartinPaulo/ReportsAlpha.git
                  cd ReportsAlpha/
                  pip3 install -r requirements.txt
                  python3 manage.py collectstatic --no-input
                  echo "FAKE_DATA_DIRECTORY = '/ReportsAlpha/static/fake_data/'" > reports_beta/local_settings.py
                  sed -i -e 's/DEBUG = True/DEBUG = False/g' reports_beta/settings.py
                  sed -i -e "s/ALLOWED_HOSTS = \[]/ALLOWED_HOSTS = \['\*']/g" reports_beta/settings.py
                  sed -i -e "s/SECRET_KEY.*/SECRET_KEY='NEW_KEY'/g" reports_beta/settings.py
                  chmod 664 db/db.sqlite3
                  chown www-data -R db
                  chown :www-data /ReportsAlpha/
                  sed -i.bak '/serve-cgi-bin.conf/a  \
                      Alias /static /ReportsAlpha/static \
                      <Directory /ReportsAlpha/static> \
                          Require all granted \
                      </Directory> \
                       \
                      <Directory /ReportsAlpha> \
                          <Files wsgi.py> \
                              Require all granted \
                          </Files> \
                      </Directory> \
                      \
                      WSGIDaemonProcess ReportsAlpha python-home=/usr/bin/python3 python-path=/ReportsAlpha \
                      WSGIProcessGroup ReportsAlpha \
                      WSGIScriptAlias / /ReportsAlpha/reports_beta/wsgi.py' /etc/apache2/sites-available/000-default.conf
                  ufw allow 'Apache Full'
                  # Prepare logging directory
                  mkdir /var/log/flow_reports
                  chown www-data:www-data /var/log/flow_reports
                  echo "127.0.0.1  `hostname`" >> /etc/hosts
                  systemctl restart apache2
                  # notify heat that we are done here
                  wc_notify --data-binary '{"status": "SUCCESS"}'
                  echo "End: run user_data bash script. "
                  echo "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"

outputs:

    instance_ip:
        description: The IP address of the deployed instance
        value: { get_attr: [app_server, first_address] }

    website_url:
        description: URL for the application
        value:
            list_join: ['', ['http://', get_attr: [app_server, first_address]]]




